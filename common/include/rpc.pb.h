// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class RpcInnerReq;
class RpcInnerResp;

enum RpcInnerReq_RPC_TYPE {
  RpcInnerReq_RPC_TYPE_ONE_WAY = 0,
  RpcInnerReq_RPC_TYPE_TWO_WAY = 1
};
bool RpcInnerReq_RPC_TYPE_IsValid(int value);
const RpcInnerReq_RPC_TYPE RpcInnerReq_RPC_TYPE_RPC_TYPE_MIN = RpcInnerReq_RPC_TYPE_ONE_WAY;
const RpcInnerReq_RPC_TYPE RpcInnerReq_RPC_TYPE_RPC_TYPE_MAX = RpcInnerReq_RPC_TYPE_TWO_WAY;
const int RpcInnerReq_RPC_TYPE_RPC_TYPE_ARRAYSIZE = RpcInnerReq_RPC_TYPE_RPC_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcInnerReq_RPC_TYPE_descriptor();
inline const ::std::string& RpcInnerReq_RPC_TYPE_Name(RpcInnerReq_RPC_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcInnerReq_RPC_TYPE_descriptor(), value);
}
inline bool RpcInnerReq_RPC_TYPE_Parse(
    const ::std::string& name, RpcInnerReq_RPC_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcInnerReq_RPC_TYPE>(
    RpcInnerReq_RPC_TYPE_descriptor(), name, value);
}
// ===================================================================

class RpcInnerReq : public ::google::protobuf::Message {
 public:
  RpcInnerReq();
  virtual ~RpcInnerReq();

  RpcInnerReq(const RpcInnerReq& from);

  inline RpcInnerReq& operator=(const RpcInnerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcInnerReq& default_instance();

  void Swap(RpcInnerReq* other);

  // implements Message ----------------------------------------------

  RpcInnerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcInnerReq& from);
  void MergeFrom(const RpcInnerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RpcInnerReq_RPC_TYPE RPC_TYPE;
  static const RPC_TYPE ONE_WAY = RpcInnerReq_RPC_TYPE_ONE_WAY;
  static const RPC_TYPE TWO_WAY = RpcInnerReq_RPC_TYPE_TWO_WAY;
  static inline bool RPC_TYPE_IsValid(int value) {
    return RpcInnerReq_RPC_TYPE_IsValid(value);
  }
  static const RPC_TYPE RPC_TYPE_MIN =
    RpcInnerReq_RPC_TYPE_RPC_TYPE_MIN;
  static const RPC_TYPE RPC_TYPE_MAX =
    RpcInnerReq_RPC_TYPE_RPC_TYPE_MAX;
  static const int RPC_TYPE_ARRAYSIZE =
    RpcInnerReq_RPC_TYPE_RPC_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RPC_TYPE_descriptor() {
    return RpcInnerReq_RPC_TYPE_descriptor();
  }
  static inline const ::std::string& RPC_TYPE_Name(RPC_TYPE value) {
    return RpcInnerReq_RPC_TYPE_Name(value);
  }
  static inline bool RPC_TYPE_Parse(const ::std::string& name,
      RPC_TYPE* value) {
    return RpcInnerReq_RPC_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // required string methond_name = 2;
  inline bool has_methond_name() const;
  inline void clear_methond_name();
  static const int kMethondNameFieldNumber = 2;
  inline const ::std::string& methond_name() const;
  inline void set_methond_name(const ::std::string& value);
  inline void set_methond_name(const char* value);
  inline void set_methond_name(const char* value, size_t size);
  inline ::std::string* mutable_methond_name();
  inline ::std::string* release_methond_name();
  inline void set_allocated_methond_name(::std::string* methond_name);

  // required string request_id = 3;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  inline const ::std::string& request_id() const;
  inline void set_request_id(const ::std::string& value);
  inline void set_request_id(const char* value);
  inline void set_request_id(const char* value, size_t size);
  inline ::std::string* mutable_request_id();
  inline ::std::string* release_request_id();
  inline void set_allocated_request_id(::std::string* request_id);

  // required .RpcInnerReq.RPC_TYPE type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::RpcInnerReq_RPC_TYPE type() const;
  inline void set_type(::RpcInnerReq_RPC_TYPE value);

  // required string data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:RpcInnerReq)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_methond_name();
  inline void clear_has_methond_name();
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  ::std::string* methond_name_;
  ::std::string* request_id_;
  ::std::string* data_;
  int type_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static RpcInnerReq* default_instance_;
};
// -------------------------------------------------------------------

class RpcInnerResp : public ::google::protobuf::Message {
 public:
  RpcInnerResp();
  virtual ~RpcInnerResp();

  RpcInnerResp(const RpcInnerResp& from);

  inline RpcInnerResp& operator=(const RpcInnerResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcInnerResp& default_instance();

  void Swap(RpcInnerResp* other);

  // implements Message ----------------------------------------------

  RpcInnerResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcInnerResp& from);
  void MergeFrom(const RpcInnerResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& request_id() const;
  inline void set_request_id(const ::std::string& value);
  inline void set_request_id(const char* value);
  inline void set_request_id(const char* value, size_t size);
  inline ::std::string* mutable_request_id();
  inline ::std::string* release_request_id();
  inline void set_allocated_request_id(::std::string* request_id);

  // required string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:RpcInnerResp)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_id_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static RpcInnerResp* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcInnerReq

// required string service_name = 1;
inline bool RpcInnerReq::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcInnerReq::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcInnerReq::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcInnerReq::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& RpcInnerReq::service_name() const {
  // @@protoc_insertion_point(field_get:RpcInnerReq.service_name)
  return *service_name_;
}
inline void RpcInnerReq::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:RpcInnerReq.service_name)
}
inline void RpcInnerReq::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpcInnerReq.service_name)
}
inline void RpcInnerReq::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpcInnerReq.service_name)
}
inline ::std::string* RpcInnerReq::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpcInnerReq.service_name)
  return service_name_;
}
inline ::std::string* RpcInnerReq::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcInnerReq::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpcInnerReq.service_name)
}

// required string methond_name = 2;
inline bool RpcInnerReq::has_methond_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcInnerReq::set_has_methond_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcInnerReq::clear_has_methond_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcInnerReq::clear_methond_name() {
  if (methond_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    methond_name_->clear();
  }
  clear_has_methond_name();
}
inline const ::std::string& RpcInnerReq::methond_name() const {
  // @@protoc_insertion_point(field_get:RpcInnerReq.methond_name)
  return *methond_name_;
}
inline void RpcInnerReq::set_methond_name(const ::std::string& value) {
  set_has_methond_name();
  if (methond_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    methond_name_ = new ::std::string;
  }
  methond_name_->assign(value);
  // @@protoc_insertion_point(field_set:RpcInnerReq.methond_name)
}
inline void RpcInnerReq::set_methond_name(const char* value) {
  set_has_methond_name();
  if (methond_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    methond_name_ = new ::std::string;
  }
  methond_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpcInnerReq.methond_name)
}
inline void RpcInnerReq::set_methond_name(const char* value, size_t size) {
  set_has_methond_name();
  if (methond_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    methond_name_ = new ::std::string;
  }
  methond_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpcInnerReq.methond_name)
}
inline ::std::string* RpcInnerReq::mutable_methond_name() {
  set_has_methond_name();
  if (methond_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    methond_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpcInnerReq.methond_name)
  return methond_name_;
}
inline ::std::string* RpcInnerReq::release_methond_name() {
  clear_has_methond_name();
  if (methond_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = methond_name_;
    methond_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcInnerReq::set_allocated_methond_name(::std::string* methond_name) {
  if (methond_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete methond_name_;
  }
  if (methond_name) {
    set_has_methond_name();
    methond_name_ = methond_name;
  } else {
    clear_has_methond_name();
    methond_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpcInnerReq.methond_name)
}

// required string request_id = 3;
inline bool RpcInnerReq::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcInnerReq::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcInnerReq::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcInnerReq::clear_request_id() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_->clear();
  }
  clear_has_request_id();
}
inline const ::std::string& RpcInnerReq::request_id() const {
  // @@protoc_insertion_point(field_get:RpcInnerReq.request_id)
  return *request_id_;
}
inline void RpcInnerReq::set_request_id(const ::std::string& value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set:RpcInnerReq.request_id)
}
inline void RpcInnerReq::set_request_id(const char* value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpcInnerReq.request_id)
}
inline void RpcInnerReq::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpcInnerReq.request_id)
}
inline ::std::string* RpcInnerReq::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpcInnerReq.request_id)
  return request_id_;
}
inline ::std::string* RpcInnerReq::release_request_id() {
  clear_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_id_;
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcInnerReq::set_allocated_request_id(::std::string* request_id) {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (request_id) {
    set_has_request_id();
    request_id_ = request_id;
  } else {
    clear_has_request_id();
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpcInnerReq.request_id)
}

// required .RpcInnerReq.RPC_TYPE type = 4;
inline bool RpcInnerReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcInnerReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcInnerReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcInnerReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::RpcInnerReq_RPC_TYPE RpcInnerReq::type() const {
  // @@protoc_insertion_point(field_get:RpcInnerReq.type)
  return static_cast< ::RpcInnerReq_RPC_TYPE >(type_);
}
inline void RpcInnerReq::set_type(::RpcInnerReq_RPC_TYPE value) {
  assert(::RpcInnerReq_RPC_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RpcInnerReq.type)
}

// required string data = 5;
inline bool RpcInnerReq::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcInnerReq::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcInnerReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcInnerReq::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& RpcInnerReq::data() const {
  // @@protoc_insertion_point(field_get:RpcInnerReq.data)
  return *data_;
}
inline void RpcInnerReq::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:RpcInnerReq.data)
}
inline void RpcInnerReq::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpcInnerReq.data)
}
inline void RpcInnerReq::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpcInnerReq.data)
}
inline ::std::string* RpcInnerReq::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpcInnerReq.data)
  return data_;
}
inline ::std::string* RpcInnerReq::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcInnerReq::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpcInnerReq.data)
}

// -------------------------------------------------------------------

// RpcInnerResp

// required string request_id = 1;
inline bool RpcInnerResp::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcInnerResp::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcInnerResp::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcInnerResp::clear_request_id() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_->clear();
  }
  clear_has_request_id();
}
inline const ::std::string& RpcInnerResp::request_id() const {
  // @@protoc_insertion_point(field_get:RpcInnerResp.request_id)
  return *request_id_;
}
inline void RpcInnerResp::set_request_id(const ::std::string& value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set:RpcInnerResp.request_id)
}
inline void RpcInnerResp::set_request_id(const char* value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpcInnerResp.request_id)
}
inline void RpcInnerResp::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpcInnerResp.request_id)
}
inline ::std::string* RpcInnerResp::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpcInnerResp.request_id)
  return request_id_;
}
inline ::std::string* RpcInnerResp::release_request_id() {
  clear_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_id_;
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcInnerResp::set_allocated_request_id(::std::string* request_id) {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (request_id) {
    set_has_request_id();
    request_id_ = request_id;
  } else {
    clear_has_request_id();
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpcInnerResp.request_id)
}

// required string data = 2;
inline bool RpcInnerResp::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcInnerResp::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcInnerResp::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcInnerResp::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& RpcInnerResp::data() const {
  // @@protoc_insertion_point(field_get:RpcInnerResp.data)
  return *data_;
}
inline void RpcInnerResp::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:RpcInnerResp.data)
}
inline void RpcInnerResp::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpcInnerResp.data)
}
inline void RpcInnerResp::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpcInnerResp.data)
}
inline ::std::string* RpcInnerResp::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpcInnerResp.data)
  return data_;
}
inline ::std::string* RpcInnerResp::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcInnerResp::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpcInnerResp.data)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RpcInnerReq_RPC_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RpcInnerReq_RPC_TYPE>() {
  return ::RpcInnerReq_RPC_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
